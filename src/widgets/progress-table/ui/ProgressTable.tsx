import clsx from "clsx";
import useEmblaCarousel from "embla-carousel-react";
import { observer } from "mobx-react-lite";
import { type FC, useEffect, useState } from "react";

import { DiveTable } from "@/features/dive-table";

import { modulesStore } from "../model/modulesStore";
import { ProgressBlock } from "./ProgressBlock";
import styles from "./ProgressTable.module.scss";

type ProgressTableProps = {
    classId?: number;
};

export const ProgressTable: FC<ProgressTableProps> = observer(
    ({ classId = 5 }) => {
        const [isReady, setIsReady] = useState(false);
        const [emblaRef] = useEmblaCarousel({
            align: "start",
            dragFree: true,
            containScroll: "keepSnaps",
        });

        useEffect(() => {
            console.log("üöÄ ProgressTable: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å classId:", classId);

            const initializeData = async () => {
                modulesStore.reset();
                await modulesStore.fetchModulesByClass(classId);
                setIsReady(true);
            };

            initializeData();

            return () => {
                modulesStore.reset();
                setIsReady(false);
            };
        }, [classId]);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è DiveTable
        const diveTableData =
            modulesStore.studentDiveGrades.map((diveGrade, index) => {
                const mark = diveGrade.score !== null ? diveGrade.score : -1;
                return {
                    week: modulesStore.isFinalMode
                        ? diveGrade.subjectName // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
                        : (index + 1).toString(),
                    subject: modulesStore.isFinalMode
                        ? "" // –í —Ä–µ–∂–∏–º–µ –∏—Ç–æ–≥–∞ —É–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –ø—Ä–µ–¥–º–µ—Ç
                        : diveGrade.subjectName,
                    mark: mark, // –ò—Å–ø–æ–ª—å–∑—É–µ–º -1 –¥–ª—è null
                    actions: "",
                };
            }) || [];

        console.log("üìä ProgressTable: –°–æ—Å—Ç–æ—è–Ω–∏–µ:", {
            isReady,
            moduleNames: modulesStore.moduleNames,
            selectedModuleIndex: modulesStore.selectedModuleIndex,
            selectedModule: modulesStore.selectedModule,
            diveTableData,
            isLoading: modulesStore.isLoading,
            isLoadingGrades: modulesStore.isLoadingGrades,
            error: modulesStore.error,
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π
        if (!isReady || modulesStore.isLoading) {
            return (
                <div className={styles.container}>
                    <div>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...</div>
                </div>
            );
        }

        if (modulesStore.error) {
            return (
                <div className={styles.container}>
                    <div>–û—à–∏–±–∫–∞: {modulesStore.error}</div>
                </div>
            );
        }

        if (modulesStore.moduleNames.length === 0) {
            return (
                <div className={styles.container}>
                    <div>–ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                </div>
            );
        }

        return (
            <div className={clsx(styles.container, isReady && styles.ready)}>
                <div className={styles.carouselContainer} ref={emblaRef}>
                    <div className={styles.carousel}>
                        {modulesStore.moduleNames.map((moduleName, index) => (
                            <ProgressBlock
                                key={index}
                                value={moduleName}
                                isSelected={
                                    modulesStore.selectedModuleIndex === index
                                }
                                onClick={() =>
                                    modulesStore.selectModule(index, 8)
                                }
                            />
                        ))}
                        <ProgressBlock
                            key="final"
                            value="–ò—Ç–æ–≥"
                            isSelected={modulesStore.isFinalMode}
                            onClick={() => modulesStore.selectFinalMode(8)}
                        />
                    </div>
                </div>

                <DiveTable
                    data={diveTableData}
                    isFinalMode={modulesStore.isFinalMode}
                />
            </div>
        );
    }
);
