import "@/shared/styles/global.scss";

import type { Metadata } from "next";
import { Geist, Geist_Mono, Rubik } from "next/font/google";
import { notFound } from "next/navigation";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { Toaster } from "react-hot-toast";

import { QueryProvider } from "./providers/QueryProvider";
import { StyleProvider } from "./providers/StyleProvider";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

const rubik = Rubik({
    subsets: ["latin"],
    variable: "--font-rubik",
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

type Props = {
    children: React.ReactNode;
    params: Promise<{ locale: string }>;
};

export default async function LocaleLayout(props: Props) {
    const { children } = props;
    const { locale } = await props.params; // асинхронный доступ к params

    if (!["ru", "en"].includes(locale)) notFound();

    const messages = await getMessages({ locale });

    return (
        <html lang={locale}>
            <body
                className={`${geistSans.variable} ${geistMono.variable} ${rubik.variable} antialiased`}
            >
                <NextIntlClientProvider locale={locale} messages={messages}>
                    <QueryProvider>
                        <StyleProvider>{children}</StyleProvider>
                        <Toaster position="top-right" />
                    </QueryProvider>
                </NextIntlClientProvider>
            </body>
        </html>
    );
}

export function generateStaticParams() {
    return [{ locale: "ru" }, { locale: "en" }];
}
